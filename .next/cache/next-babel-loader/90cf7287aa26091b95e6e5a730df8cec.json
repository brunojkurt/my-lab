{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\jungb\\\\Documents\\\\DEV\\\\Nodejs\\\\my-lab\\\\components\\\\CurrencyInput\\\\index.js\";\nimport { InputNumber } from 'antd';\n\nconst currencyFormatter = value => {\n  return new Intl.NumberFormat('pt-BR', {\n    style: 'currency',\n    currency: 'BRL'\n  }).format(value);\n};\n\nconst currencyParser = val => {\n  try {\n    // for when the input gets clears\n    if (typeof val === \"string\" && !val.length) {\n      val = \"0.0\";\n    } // detecting and parsing between comma and dot\n\n\n    let group = new Intl.NumberFormat('pt-BR').format(1111).replace(/1/g, \"\");\n    let decimal = new Intl.NumberFormat('pt-BR').format(1.1).replace(/1/g, \"\");\n    let reversedVal = val.replace(new RegExp(\"\\\\\" + group, \"g\"), \"\"); //reversedVal = reversedVal.replace(new RegExp(\"\\\\\" + decimal, \"g\"), \".\");\n    //  => 1232.21 €\n    // removing everything except the digits and dot\n\n    reversedVal = reversedVal.replace(/[^0-9.]/g, \"\"); //  => 1232.21\n    // appending digits properly\n\n    const digitsAfterDecimalCount = (reversedVal.split(\".\")[1] || []).length;\n    const needsDigitsAppended = digitsAfterDecimalCount > 2;\n\n    if (needsDigitsAppended) {\n      reversedVal = reversedVal * Math.pow(10, digitsAfterDecimalCount - 2);\n    }\n\n    return Number.isNaN(reversedVal) ? 0 : reversedVal;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nconst CurrencyInput = () => {\n  return /*#__PURE__*/_jsxDEV(InputNumber, {\n    defaultValue: 150,\n    style: {\n      width: 400,\n      marginLeft: \"1rem\"\n    },\n    formatter: currencyFormatter,\n    parser: currencyParser\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n\nexport default CurrencyInput;","map":{"version":3,"sources":["C:/Users/jungb/Documents/DEV/Nodejs/my-lab/components/CurrencyInput/index.js"],"names":["InputNumber","currencyFormatter","value","Intl","NumberFormat","style","currency","format","currencyParser","val","length","group","replace","decimal","reversedVal","RegExp","digitsAfterDecimalCount","split","needsDigitsAppended","Math","pow","Number","isNaN","error","console","CurrencyInput","width","marginLeft"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,MAA5B;;AAEA,MAAMC,iBAAiB,GAAGC,KAAK,IAAI;AACjC,SAAO,IAAIC,IAAI,CAACC,YAAT,CAAsB,OAAtB,EAA+B;AACpCC,IAAAA,KAAK,EAAE,UAD6B;AAEpCC,IAAAA,QAAQ,EAAE;AAF0B,GAA/B,EAGJC,MAHI,CAGGL,KAHH,CAAP;AAID,CALD;;AAOA,MAAMM,cAAc,GAAGC,GAAG,IAAI;AAC5B,MAAI;AACF;AACA,QAAI,OAAOA,GAAP,KAAe,QAAf,IAA2B,CAACA,GAAG,CAACC,MAApC,EAA4C;AAC1CD,MAAAA,GAAG,GAAG,KAAN;AACD,KAJC,CAMF;;;AACA,QAAIE,KAAK,GAAG,IAAIR,IAAI,CAACC,YAAT,CAAsB,OAAtB,EAA+BG,MAA/B,CAAsC,IAAtC,EAA4CK,OAA5C,CAAoD,IAApD,EAA0D,EAA1D,CAAZ;AACA,QAAIC,OAAO,GAAG,IAAIV,IAAI,CAACC,YAAT,CAAsB,OAAtB,EAA+BG,MAA/B,CAAsC,GAAtC,EAA2CK,OAA3C,CAAmD,IAAnD,EAAyD,EAAzD,CAAd;AACA,QAAIE,WAAW,GAAGL,GAAG,CAACG,OAAJ,CAAY,IAAIG,MAAJ,CAAW,OAAOJ,KAAlB,EAAyB,GAAzB,CAAZ,EAA2C,EAA3C,CAAlB,CATE,CAUF;AACA;AAEA;;AACAG,IAAAA,WAAW,GAAGA,WAAW,CAACF,OAAZ,CAAoB,UAApB,EAAgC,EAAhC,CAAd,CAdE,CAeF;AAEA;;AACA,UAAMI,uBAAuB,GAAG,CAACF,WAAW,CAACG,KAAZ,CAAkB,GAAlB,EAAuB,CAAvB,KAA6B,EAA9B,EAAkCP,MAAlE;AACA,UAAMQ,mBAAmB,GAAGF,uBAAuB,GAAG,CAAtD;;AAEA,QAAIE,mBAAJ,EAAyB;AACvBJ,MAAAA,WAAW,GAAGA,WAAW,GAAGK,IAAI,CAACC,GAAL,CAAS,EAAT,EAAaJ,uBAAuB,GAAG,CAAvC,CAA5B;AACD;;AAED,WAAOK,MAAM,CAACC,KAAP,CAAaR,WAAb,IAA4B,CAA5B,GAAgCA,WAAvC;AACD,GA1BD,CA0BE,OAAOS,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD;AACF,CA9BD;;AAgCA,MAAME,aAAa,GAAG,MAAM;AAC1B,sBACE,QAAC,WAAD;AACE,IAAA,YAAY,EAAE,GADhB;AAEE,IAAA,KAAK,EAAE;AACLC,MAAAA,KAAK,EAAE,GADF;AAELC,MAAAA,UAAU,EAAE;AAFP,KAFT;AAME,IAAA,SAAS,EAAE1B,iBANb;AAOE,IAAA,MAAM,EAAEO;AAPV;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CAZD;;AAcA,eAAeiB,aAAf","sourcesContent":["import { InputNumber } from 'antd'\r\n\r\nconst currencyFormatter = value => {\r\n  return new Intl.NumberFormat('pt-BR', {\r\n    style: 'currency',\r\n    currency: 'BRL'\r\n  }).format(value);\r\n};\r\n\r\nconst currencyParser = val => {\r\n  try {\r\n    // for when the input gets clears\r\n    if (typeof val === \"string\" && !val.length) {\r\n      val = \"0.0\";\r\n    }\r\n\r\n    // detecting and parsing between comma and dot\r\n    let group = new Intl.NumberFormat('pt-BR').format(1111).replace(/1/g, \"\");\r\n    let decimal = new Intl.NumberFormat('pt-BR').format(1.1).replace(/1/g, \"\");\r\n    let reversedVal = val.replace(new RegExp(\"\\\\\" + group, \"g\"), \"\");\r\n    //reversedVal = reversedVal.replace(new RegExp(\"\\\\\" + decimal, \"g\"), \".\");\r\n    //  => 1232.21 €\r\n\r\n    // removing everything except the digits and dot\r\n    reversedVal = reversedVal.replace(/[^0-9.]/g, \"\");\r\n    //  => 1232.21\r\n\r\n    // appending digits properly\r\n    const digitsAfterDecimalCount = (reversedVal.split(\".\")[1] || []).length;\r\n    const needsDigitsAppended = digitsAfterDecimalCount > 2;\r\n\r\n    if (needsDigitsAppended) {\r\n      reversedVal = reversedVal * Math.pow(10, digitsAfterDecimalCount - 2);\r\n    }\r\n\r\n    return Number.isNaN(reversedVal) ? 0 : reversedVal;\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n};\r\n\r\nconst CurrencyInput = () => {\r\n  return (\r\n    <InputNumber\r\n      defaultValue={150}\r\n      style={{\r\n        width: 400,\r\n        marginLeft: \"1rem\"\r\n      }}\r\n      formatter={currencyFormatter}\r\n      parser={currencyParser}\r\n    />\r\n  );\r\n};\r\n\r\nexport default CurrencyInput"]},"metadata":{},"sourceType":"module"}