{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\jungb\\\\Documents\\\\DEV\\\\Nodejs\\\\my-lab\\\\components\\\\CurrencyInput\\\\index.js\";\nimport { useState } from 'react';\nimport { InputNumber } from 'antd';\n\nconst currencyFormatter = value => {\n  return new Intl.NumberFormat('pt-BR', {\n    style: 'currency',\n    currency: 'BRL'\n  }).format(value);\n};\n\nconst currencyParser = val => {\n  if (typeof val === \"string\" && !val.length) val = \"0,0\";\n  val = val.replace(/[^0-9\\.|\\,]/g, \"\");\n  val = val.replace('.', '');\n  val = val.replace(',', '.');\n  return Number.isNaN(val) ? 0 : val; // try {\n  //   if (typeof val === \"string\" && !val.length)\n  //     val = \"0,0\";\n  //   let group = '.';\n  //   let decimal = ',';\n  //   let reversedVal = val.replace(/[^0-9\\.|\\,]/g, \"\");\n  //   reversedVal = reversedVal.replace(new RegExp(\"\\\\\" + group, \"g\"), \"\");\n  //   reversedVal = reversedVal.replace(new RegExp(\"\\\\\" + decimal, \"g\"), \".\");\n  //   return Number.isNaN(reversedVal) ? 0 : reversedVal;\n  // } catch (error) {\n  //   console.error(error);\n  // }\n};\n\nconst CurrencyInput = props => {\n  const [defaultValue] = props;\n  const {\n    0: inputValue,\n    1: setInputValue\n  } = useState(defaultValue || toFixed(2));\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(InputNumber, {\n      style: {\n        width: 400,\n        marginLeft: \"1rem\"\n      },\n      formatter: currencyFormatter,\n      parser: currencyParser,\n      onChange: value => setInputValue(value.toFixed(2)),\n      value: inputValue\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), inputValue]\n  }, void 0, true);\n};\n\nexport default CurrencyInput;","map":{"version":3,"sources":["C:/Users/jungb/Documents/DEV/Nodejs/my-lab/components/CurrencyInput/index.js"],"names":["useState","InputNumber","currencyFormatter","value","Intl","NumberFormat","style","currency","format","currencyParser","val","length","replace","Number","isNaN","CurrencyInput","props","defaultValue","inputValue","setInputValue","toFixed","width","marginLeft"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,WAAT,QAA4B,MAA5B;;AAEA,MAAMC,iBAAiB,GAAGC,KAAK,IAAI;AACjC,SAAO,IAAIC,IAAI,CAACC,YAAT,CAAsB,OAAtB,EAA+B;AACpCC,IAAAA,KAAK,EAAE,UAD6B;AAEpCC,IAAAA,QAAQ,EAAE;AAF0B,GAA/B,EAGJC,MAHI,CAGGL,KAHH,CAAP;AAID,CALD;;AAOA,MAAMM,cAAc,GAAGC,GAAG,IAAI;AAC5B,MAAI,OAAOA,GAAP,KAAe,QAAf,IAA2B,CAACA,GAAG,CAACC,MAApC,EACED,GAAG,GAAG,KAAN;AAEFA,EAAAA,GAAG,GAAGA,GAAG,CAACE,OAAJ,CAAY,cAAZ,EAA4B,EAA5B,CAAN;AACAF,EAAAA,GAAG,GAAGA,GAAG,CAACE,OAAJ,CAAY,GAAZ,EAAiB,EAAjB,CAAN;AACAF,EAAAA,GAAG,GAAGA,GAAG,CAACE,OAAJ,CAAY,GAAZ,EAAiB,GAAjB,CAAN;AAEA,SAAOC,MAAM,CAACC,KAAP,CAAaJ,GAAb,IAAoB,CAApB,GAAwBA,GAA/B,CAR4B,CAS5B;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACD,CAxBD;;AA0BA,MAAMK,aAAa,GAAIC,KAAD,IAAW;AAC/B,QAAM,CAAEC,YAAF,IAAmBD,KAAzB;AACA,QAAM;AAAA,OAAEE,UAAF;AAAA,OAAcC;AAAd,MAAgCnB,QAAQ,CAACiB,YAAY,IAAIG,OAAO,CAAC,CAAD,CAAxB,CAA9C;AAEA,sBACE;AAAA,4BACE,QAAC,WAAD;AACE,MAAA,KAAK,EAAE;AACLC,QAAAA,KAAK,EAAE,GADF;AAELC,QAAAA,UAAU,EAAE;AAFP,OADT;AAKE,MAAA,SAAS,EAAEpB,iBALb;AAME,MAAA,MAAM,EAAEO,cANV;AAOE,MAAA,QAAQ,EAAEN,KAAK,IAAIgB,aAAa,CAAChB,KAAK,CAACiB,OAAN,CAAc,CAAd,CAAD,CAPlC;AAQE,MAAA,KAAK,EAAEF;AART;AAAA;AAAA;AAAA;AAAA,YADF,EAWIA,UAXJ;AAAA,kBADF;AAeD,CAnBD;;AAqBA,eAAeH,aAAf","sourcesContent":["import { useState } from 'react'\r\nimport { InputNumber } from 'antd'\r\n\r\nconst currencyFormatter = value => {\r\n  return new Intl.NumberFormat('pt-BR', {\r\n    style: 'currency',\r\n    currency: 'BRL'\r\n  }).format(value);\r\n};\r\n\r\nconst currencyParser = val => {\r\n  if (typeof val === \"string\" && !val.length)\r\n    val = \"0,0\"\r\n\r\n  val = val.replace(/[^0-9\\.|\\,]/g, \"\")\r\n  val = val.replace('.', '')\r\n  val = val.replace(',', '.')\r\n\r\n  return Number.isNaN(val) ? 0 : val;\r\n  // try {\r\n    \r\n  //   if (typeof val === \"string\" && !val.length)\r\n  //     val = \"0,0\";\r\n\r\n  //   let group = '.';\r\n  //   let decimal = ',';\r\n  //   let reversedVal = val.replace(/[^0-9\\.|\\,]/g, \"\");\r\n  //   reversedVal = reversedVal.replace(new RegExp(\"\\\\\" + group, \"g\"), \"\");\r\n  //   reversedVal = reversedVal.replace(new RegExp(\"\\\\\" + decimal, \"g\"), \".\");\r\n\r\n  //   return Number.isNaN(reversedVal) ? 0 : reversedVal;\r\n  // } catch (error) {\r\n  //   console.error(error);\r\n  // }\r\n};\r\n\r\nconst CurrencyInput = (props) => {\r\n  const [ defaultValue ] = props\r\n  const [ inputValue, setInputValue ] = useState(defaultValue || toFixed(2))\r\n\r\n  return (\r\n    <>\r\n      <InputNumber\r\n        style={{\r\n          width: 400,\r\n          marginLeft: \"1rem\"\r\n        }}\r\n        formatter={currencyFormatter}\r\n        parser={currencyParser}\r\n        onChange={value => setInputValue(value.toFixed(2))}\r\n        value={inputValue}\r\n      />\r\n      { inputValue }\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CurrencyInput"]},"metadata":{},"sourceType":"module"}