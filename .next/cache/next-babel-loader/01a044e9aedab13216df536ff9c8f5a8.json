{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\jungb\\\\Documents\\\\DEV\\\\Nodejs\\\\my-lab\\\\components\\\\CurrencyInput\\\\index.js\",\n    _this = this;\n\nimport { InputNumber } from 'antd';\n\nvar currencyFormatter = function currencyFormatter(value) {\n  return new Intl.NumberFormat('pt-BR', {\n    style: 'currency',\n    currency: 'BRL'\n  }).format(value);\n};\n\nvar currencyParser = function currencyParser(val) {\n  if (typeof val === \"string\" && !val.length) val = \"0,0\";\n  val.replace('.', '');\n  val.replace(',', '.');\n  return val; // try {\n  //   if (typeof val === \"string\" && !val.length)\n  //     val = \"0,0\";\n  //   let group = '.';\n  //   let decimal = ',';\n  //   let reversedVal = val.replace(/[^0-9\\.|\\,]/g, \"\");\n  //   reversedVal = reversedVal.replace(new RegExp(\"\\\\\" + group, \"g\"), \"\");\n  //   reversedVal = reversedVal.replace(new RegExp(\"\\\\\" + decimal, \"g\"), \".\");\n  //   return Number.isNaN(reversedVal) ? 0 : reversedVal;\n  // } catch (error) {\n  //   console.error(error);\n  // }\n};\n\nvar CurrencyInput = function CurrencyInput() {\n  return /*#__PURE__*/_jsxDEV(InputNumber, {\n    defaultValue: 150,\n    style: {\n      width: 400,\n      marginLeft: \"1rem\"\n    },\n    formatter: currencyFormatter,\n    parser: currencyParser\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, _this);\n};\n\n_c = CurrencyInput;\nexport default CurrencyInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"CurrencyInput\");","map":{"version":3,"sources":["C:/Users/jungb/Documents/DEV/Nodejs/my-lab/components/CurrencyInput/index.js"],"names":["InputNumber","currencyFormatter","value","Intl","NumberFormat","style","currency","format","currencyParser","val","length","replace","CurrencyInput","width","marginLeft"],"mappings":";;;;;AAAA,SAASA,WAAT,QAA4B,MAA5B;;AAEA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAAAC,KAAK,EAAI;AACjC,SAAO,IAAIC,IAAI,CAACC,YAAT,CAAsB,OAAtB,EAA+B;AACpCC,IAAAA,KAAK,EAAE,UAD6B;AAEpCC,IAAAA,QAAQ,EAAE;AAF0B,GAA/B,EAGJC,MAHI,CAGGL,KAHH,CAAP;AAID,CALD;;AAOA,IAAMM,cAAc,GAAG,SAAjBA,cAAiB,CAAAC,GAAG,EAAI;AAC5B,MAAI,OAAOA,GAAP,KAAe,QAAf,IAA2B,CAACA,GAAG,CAACC,MAApC,EACED,GAAG,GAAG,KAAN;AAEFA,EAAAA,GAAG,CAACE,OAAJ,CAAY,GAAZ,EAAiB,EAAjB;AACAF,EAAAA,GAAG,CAACE,OAAJ,CAAY,GAAZ,EAAiB,GAAjB;AAEA,SAAOF,GAAP,CAP4B,CAQ5B;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACD,CAvBD;;AAyBA,IAAMG,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC1B,sBACE,QAAC,WAAD;AACE,IAAA,YAAY,EAAE,GADhB;AAEE,IAAA,KAAK,EAAE;AACLC,MAAAA,KAAK,EAAE,GADF;AAELC,MAAAA,UAAU,EAAE;AAFP,KAFT;AAME,IAAA,SAAS,EAAEb,iBANb;AAOE,IAAA,MAAM,EAAEO;AAPV;AAAA;AAAA;AAAA;AAAA,WADF;AAWD,CAZD;;KAAMI,a;AAcN,eAAeA,aAAf","sourcesContent":["import { InputNumber } from 'antd'\r\n\r\nconst currencyFormatter = value => {\r\n  return new Intl.NumberFormat('pt-BR', {\r\n    style: 'currency',\r\n    currency: 'BRL'\r\n  }).format(value);\r\n};\r\n\r\nconst currencyParser = val => {\r\n  if (typeof val === \"string\" && !val.length)\r\n    val = \"0,0\";\r\n\r\n  val.replace('.', '')\r\n  val.replace(',', '.');\r\n\r\n  return val\r\n  // try {\r\n    \r\n  //   if (typeof val === \"string\" && !val.length)\r\n  //     val = \"0,0\";\r\n\r\n  //   let group = '.';\r\n  //   let decimal = ',';\r\n  //   let reversedVal = val.replace(/[^0-9\\.|\\,]/g, \"\");\r\n  //   reversedVal = reversedVal.replace(new RegExp(\"\\\\\" + group, \"g\"), \"\");\r\n  //   reversedVal = reversedVal.replace(new RegExp(\"\\\\\" + decimal, \"g\"), \".\");\r\n\r\n  //   return Number.isNaN(reversedVal) ? 0 : reversedVal;\r\n  // } catch (error) {\r\n  //   console.error(error);\r\n  // }\r\n};\r\n\r\nconst CurrencyInput = () => {\r\n  return (\r\n    <InputNumber\r\n      defaultValue={150}\r\n      style={{\r\n        width: 400,\r\n        marginLeft: \"1rem\"\r\n      }}\r\n      formatter={currencyFormatter}\r\n      parser={currencyParser}\r\n    />\r\n  );\r\n};\r\n\r\nexport default CurrencyInput"]},"metadata":{},"sourceType":"module"}