{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\jungb\\\\Documents\\\\DEV\\\\Nodejs\\\\my-lab\\\\components\\\\CurrencyInput\\\\index.js\";\nimport { InputNumber } from 'antd';\n\nconst currencyFormatter = value => {\n  return new Intl.NumberFormat('pt-BR', {\n    style: 'currency',\n    currency: 'BRL'\n  }).format(value);\n};\n\nconst currencyParser = val => {\n  try {\n    if (typeof val === \"string\" && !val.length) {\n      val = \"0,0\";\n    }\n\n    let reversedVal = val.replace(/[^0-9\\.|\\,]/g, \"\");\n    console.log(reversedVal);\n    let group = '.';\n    let decimal = ',';\n    reversedVal = reversedVal.replace(new RegExp(\"\\\\\" + group, \"g\"), \"\");\n    reversedVal = reversedVal.replace(new RegExp(\"\\\\\" + decimal, \"g\"), \".\");\n    return Number.isNaN(reversedVal) ? 0 : reversedVal;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nconst CurrencyInput = () => {\n  return /*#__PURE__*/_jsxDEV(InputNumber, {\n    defaultValue: 150,\n    style: {\n      width: 400,\n      marginLeft: \"1rem\"\n    },\n    step: 0.1,\n    formatter: currencyFormatter,\n    parser: currencyParser\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n\nexport default CurrencyInput;","map":{"version":3,"sources":["C:/Users/jungb/Documents/DEV/Nodejs/my-lab/components/CurrencyInput/index.js"],"names":["InputNumber","currencyFormatter","value","Intl","NumberFormat","style","currency","format","currencyParser","val","length","reversedVal","replace","console","log","group","decimal","RegExp","Number","isNaN","error","CurrencyInput","width","marginLeft"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,MAA5B;;AAEA,MAAMC,iBAAiB,GAAGC,KAAK,IAAI;AACjC,SAAO,IAAIC,IAAI,CAACC,YAAT,CAAsB,OAAtB,EAA+B;AACpCC,IAAAA,KAAK,EAAE,UAD6B;AAEpCC,IAAAA,QAAQ,EAAE;AAF0B,GAA/B,EAGJC,MAHI,CAGGL,KAHH,CAAP;AAID,CALD;;AAOA,MAAMM,cAAc,GAAGC,GAAG,IAAI;AAC5B,MAAI;AAEF,QAAI,OAAOA,GAAP,KAAe,QAAf,IAA2B,CAACA,GAAG,CAACC,MAApC,EAA4C;AAC1CD,MAAAA,GAAG,GAAG,KAAN;AACD;;AAED,QAAIE,WAAW,GAAGF,GAAG,CAACG,OAAJ,CAAY,cAAZ,EAA4B,EAA5B,CAAlB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,WAAZ;AAEA,QAAII,KAAK,GAAG,GAAZ;AACA,QAAIC,OAAO,GAAG,GAAd;AACAL,IAAAA,WAAW,GAAGA,WAAW,CAACC,OAAZ,CAAoB,IAAIK,MAAJ,CAAW,OAAOF,KAAlB,EAAyB,GAAzB,CAApB,EAAmD,EAAnD,CAAd;AACAJ,IAAAA,WAAW,GAAGA,WAAW,CAACC,OAAZ,CAAoB,IAAIK,MAAJ,CAAW,OAAOD,OAAlB,EAA2B,GAA3B,CAApB,EAAqD,GAArD,CAAd;AAEA,WAAOE,MAAM,CAACC,KAAP,CAAaR,WAAb,IAA4B,CAA5B,GAAgCA,WAAvC;AACD,GAfD,CAeE,OAAOS,KAAP,EAAc;AACdP,IAAAA,OAAO,CAACO,KAAR,CAAcA,KAAd;AACD;AACF,CAnBD;;AAqBA,MAAMC,aAAa,GAAG,MAAM;AAC1B,sBACE,QAAC,WAAD;AACE,IAAA,YAAY,EAAE,GADhB;AAEE,IAAA,KAAK,EAAE;AACLC,MAAAA,KAAK,EAAE,GADF;AAELC,MAAAA,UAAU,EAAE;AAFP,KAFT;AAME,IAAA,IAAI,EAAE,GANR;AAOE,IAAA,SAAS,EAAEtB,iBAPb;AAQE,IAAA,MAAM,EAAEO;AARV;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CAbD;;AAeA,eAAea,aAAf","sourcesContent":["import { InputNumber } from 'antd'\r\n\r\nconst currencyFormatter = value => {\r\n  return new Intl.NumberFormat('pt-BR', {\r\n    style: 'currency',\r\n    currency: 'BRL'\r\n  }).format(value);\r\n};\r\n\r\nconst currencyParser = val => {\r\n  try {\r\n    \r\n    if (typeof val === \"string\" && !val.length) {\r\n      val = \"0,0\";\r\n    }\r\n\r\n    let reversedVal = val.replace(/[^0-9\\.|\\,]/g, \"\");\r\n    console.log(reversedVal)\r\n\r\n    let group = '.';\r\n    let decimal = ',';\r\n    reversedVal = reversedVal.replace(new RegExp(\"\\\\\" + group, \"g\"), \"\");\r\n    reversedVal = reversedVal.replace(new RegExp(\"\\\\\" + decimal, \"g\"), \".\");\r\n\r\n    return Number.isNaN(reversedVal) ? 0 : reversedVal;\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n};\r\n\r\nconst CurrencyInput = () => {\r\n  return (\r\n    <InputNumber\r\n      defaultValue={150}\r\n      style={{\r\n        width: 400,\r\n        marginLeft: \"1rem\"\r\n      }}\r\n      step={0.1}\r\n      formatter={currencyFormatter}\r\n      parser={currencyParser}\r\n    />\r\n  );\r\n};\r\n\r\nexport default CurrencyInput"]},"metadata":{},"sourceType":"module"}