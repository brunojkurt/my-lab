{"ast":null,"code":"import _defineProperty from \"C:/Users/jungb/Documents/DEV/Nodejs/my-lab/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\jungb\\\\Documents\\\\DEV\\\\Nodejs\\\\my-lab\\\\components\\\\CurrencyInput\\\\index.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState } from 'react';\nimport { InputNumber } from 'antd';\n\nvar currencyFormatter = function currencyFormatter(value) {\n  return new Intl.NumberFormat('pt-BR', {\n    style: 'currency',\n    currency: 'BRL'\n  }).format(value);\n};\n\nvar CurrencyInput = function CurrencyInput(props) {\n  _s();\n\n  var defaultValue = props.defaultValue;\n\n  var _useState = useState(defaultValue || 0),\n      inputValue = _useState[0],\n      setInputValue = _useState[1];\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(InputNumber, _objectSpread({\n      formatter: function formatter() {\n        return currencyFormatter(inputValue);\n      },\n      onChange: function onChange(value) {\n        return setInputValue(parseFloat(value.toString().replace(/[^\\d]/g, '').replace(/(\\d\\d?)$/, '.$1')).toFixed(2));\n      },\n      value: inputValue\n    }, props), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, _this), inputValue]\n  }, void 0, true);\n};\n\n_s(CurrencyInput, \"IHDL5eEJkM8VP+KFr58Hoa+a7rk=\");\n\n_c = CurrencyInput;\nexport default CurrencyInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"CurrencyInput\");","map":{"version":3,"sources":["C:/Users/jungb/Documents/DEV/Nodejs/my-lab/components/CurrencyInput/index.js"],"names":["useState","InputNumber","currencyFormatter","value","Intl","NumberFormat","style","currency","format","CurrencyInput","props","defaultValue","inputValue","setInputValue","parseFloat","toString","replace","toFixed"],"mappings":";;;;;;;;;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,WAAT,QAA4B,MAA5B;;AAEA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAAAC,KAAK,EAAI;AACjC,SAAO,IAAIC,IAAI,CAACC,YAAT,CAAsB,OAAtB,EAA+B;AACpCC,IAAAA,KAAK,EAAE,UAD6B;AAEpCC,IAAAA,QAAQ,EAAE;AAF0B,GAA/B,EAGJC,MAHI,CAGGL,KAHH,CAAP;AAID,CALD;;AAOA,IAAMM,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAAW;AAAA;;AAAA,MACvBC,YADuB,GACND,KADM,CACvBC,YADuB;;AAAA,kBAEOX,QAAQ,CAACW,YAAY,IAAI,CAAjB,CAFf;AAAA,MAEvBC,UAFuB;AAAA,MAEXC,aAFW;;AAI/B,sBACE;AAAA,4BACE,QAAC,WAAD;AACE,MAAA,SAAS,EAAE;AAAA,eAAMX,iBAAiB,CAACU,UAAD,CAAvB;AAAA,OADb;AAEE,MAAA,QAAQ,EAAE,kBAAAT,KAAK;AAAA,eAAIU,aAAa,CAACC,UAAU,CAACX,KAAK,CAACY,QAAN,GAAiBC,OAAjB,CAAyB,QAAzB,EAAkC,EAAlC,EAAsCA,OAAtC,CAA8C,UAA9C,EAAyD,KAAzD,CAAD,CAAV,CAA4EC,OAA5E,CAAoF,CAApF,CAAD,CAAjB;AAAA,OAFjB;AAGE,MAAA,KAAK,EAAEL;AAHT,OAIMF,KAJN;AAAA;AAAA;AAAA;AAAA,aADF,EAOIE,UAPJ;AAAA,kBADF;AAWD,CAfD;;GAAMH,a;;KAAAA,a;AAiBN,eAAeA,aAAf","sourcesContent":["import { useState } from 'react'\r\nimport { InputNumber } from 'antd'\r\n\r\nconst currencyFormatter = value => {\r\n  return new Intl.NumberFormat('pt-BR', {\r\n    style: 'currency',\r\n    currency: 'BRL'\r\n  }).format(value);\r\n};\r\n\r\nconst CurrencyInput = (props) => {\r\n  const { defaultValue } = props\r\n  const [ inputValue, setInputValue ] = useState(defaultValue || 0)\r\n\r\n  return (\r\n    <>\r\n      <InputNumber\r\n        formatter={() => currencyFormatter(inputValue)}\r\n        onChange={value => setInputValue(parseFloat(value.toString().replace(/[^\\d]/g,'').replace(/(\\d\\d?)$/,'.$1')).toFixed(2))}\r\n        value={inputValue}\r\n        {...props}\r\n      />\r\n      { inputValue }\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CurrencyInput"]},"metadata":{},"sourceType":"module"}